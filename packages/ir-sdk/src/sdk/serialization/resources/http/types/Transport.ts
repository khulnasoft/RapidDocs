/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsIr from "../../../../api/index";
import * as core from "../../../../core";
import { GrpcTransport } from "./GrpcTransport";

export const Transport: core.serialization.Schema<serializers.Transport.Raw, RapiddocsIr.Transport> = core.serialization
    .union("type", {
        http: core.serialization.object({}),
        grpc: GrpcTransport,
    })
    .transform<RapiddocsIr.Transport>({
        transform: (value) => {
            switch (value.type) {
                case "http":
                    return RapiddocsIr.Transport.http();
                case "grpc":
                    return RapiddocsIr.Transport.grpc(value);
                default:
                    return value as RapiddocsIr.Transport;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Transport {
    export type Raw = Transport.Http | Transport.Grpc;

    export interface Http {
        type: "http";
    }

    export interface Grpc extends GrpcTransport.Raw {
        type: "grpc";
    }
}
