/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";
import { FileSchema } from "./FileSchema";

export const MultipartSchema: core.serialization.Schema<
    serializers.MultipartSchema.Raw,
    RapiddocsOpenapiIr.MultipartSchema
> = core.serialization
    .union("type", {
        file: FileSchema,
        json: core.serialization.object({
            value: core.serialization.lazy(() => serializers.Schema),
        }),
    })
    .transform<RapiddocsOpenapiIr.MultipartSchema>({
        transform: (value) => {
            switch (value.type) {
                case "file":
                    return RapiddocsOpenapiIr.MultipartSchema.file(value);
                case "json":
                    return RapiddocsOpenapiIr.MultipartSchema.json(value.value);
                default:
                    return value as RapiddocsOpenapiIr.MultipartSchema;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace MultipartSchema {
    export type Raw = MultipartSchema.File | MultipartSchema.Json;

    export interface File extends FileSchema.Raw {
        type: "file";
    }

    export interface Json {
        type: "json";
        value: serializers.Schema.Raw;
    }
}
