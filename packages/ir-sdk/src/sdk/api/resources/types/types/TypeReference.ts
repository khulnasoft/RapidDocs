/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as RapiddocsIr from "../../../index";

export type TypeReference =
    | RapiddocsIr.TypeReference.Container
    | RapiddocsIr.TypeReference.Named
    | RapiddocsIr.TypeReference.Primitive
    | RapiddocsIr.TypeReference.Unknown;

export namespace TypeReference {
    export interface Container extends _Utils {
        type: "container";
        container: RapiddocsIr.ContainerType;
    }

    export interface Named extends RapiddocsIr.NamedType, _Utils {
        type: "named";
    }

    export interface Primitive extends _Utils {
        type: "primitive";
        primitive: RapiddocsIr.PrimitiveType;
    }

    export interface Unknown extends _Utils {
        type: "unknown";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: RapiddocsIr.TypeReference._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        container: (value: RapiddocsIr.ContainerType) => _Result;
        named: (value: RapiddocsIr.NamedType) => _Result;
        primitive: (value: RapiddocsIr.PrimitiveType) => _Result;
        unknown: () => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const TypeReference = {
    container: (value: RapiddocsIr.ContainerType): RapiddocsIr.TypeReference.Container => {
        return {
            container: value,
            type: "container",
            _visit: function <_Result>(
                this: RapiddocsIr.TypeReference.Container,
                visitor: RapiddocsIr.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.TypeReference._visit(this, visitor);
            },
        };
    },

    named: (value: RapiddocsIr.NamedType): RapiddocsIr.TypeReference.Named => {
        return {
            ...value,
            type: "named",
            _visit: function <_Result>(
                this: RapiddocsIr.TypeReference.Named,
                visitor: RapiddocsIr.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.TypeReference._visit(this, visitor);
            },
        };
    },

    primitive: (value: RapiddocsIr.PrimitiveType): RapiddocsIr.TypeReference.Primitive => {
        return {
            primitive: value,
            type: "primitive",
            _visit: function <_Result>(
                this: RapiddocsIr.TypeReference.Primitive,
                visitor: RapiddocsIr.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.TypeReference._visit(this, visitor);
            },
        };
    },

    unknown: (): RapiddocsIr.TypeReference.Unknown => {
        return {
            type: "unknown",
            _visit: function <_Result>(
                this: RapiddocsIr.TypeReference.Unknown,
                visitor: RapiddocsIr.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.TypeReference._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: RapiddocsIr.TypeReference, visitor: RapiddocsIr.TypeReference._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "container":
                return visitor.container(value.container);
            case "named":
                return visitor.named(value);
            case "primitive":
                return visitor.primitive(value.primitive);
            case "unknown":
                return visitor.unknown();
            default:
                return visitor._other(value as any);
        }
    },
} as const;
