# This file was auto-generated by Rapiddocs from our API Definition.

from ....core.abstract_rapiddocs_service import AbstractRapiddocsService
from .upload_request import UploadRequest
from ....types.upload_response import UploadResponse
import abc
from .delete_request import DeleteRequest
from ....types.delete_response import DeleteResponse
from .describe_request import DescribeRequest
from ....types.describe_response import DescribeResponse
import typing
from ....types.fetch_response import FetchResponse
from ....types.list_response import ListResponse
from .query_request import QueryRequest
from ....types.query_response import QueryResponse
from .update_request import UpdateRequest
from ....types.update_response import UpdateResponse
import fastapi
import inspect
from ....core.exceptions.rapiddocs_http_exception import RapiddocsHTTPException
import logging
import functools
from ....core.route_args import get_route_args


class AbstractDataserviceService(AbstractRapiddocsService):
    """
    AbstractDataserviceService is an abstract class containing the methods that you should implement.

    Each method is associated with an API route, which will be registered
    with FastAPI when you register your implementation using Rapiddocs's register()
    function.
    """

    @abc.abstractmethod
    def upload(self, *, body: UploadRequest) -> UploadResponse: ...

    @abc.abstractmethod
    def delete(self, *, body: DeleteRequest) -> DeleteResponse: ...

    @abc.abstractmethod
    def describe(self, *, body: DescribeRequest) -> DescribeResponse: ...

    @abc.abstractmethod
    def fetch(
        self,
        *,
        ids: typing.Optional[typing.List[str]] = None,
        namespace: typing.Optional[str] = None,
    ) -> FetchResponse: ...

    @abc.abstractmethod
    def list_(
        self,
        *,
        prefix: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        pagination_token: typing.Optional[str] = None,
        namespace: typing.Optional[str] = None,
    ) -> ListResponse: ...

    @abc.abstractmethod
    def query(self, *, body: QueryRequest) -> QueryResponse: ...

    @abc.abstractmethod
    def update(self, *, body: UpdateRequest) -> UpdateResponse: ...

    """
    Below are internal methods used by Rapiddocs to register your implementation.
    You can ignore them.
    """

    @classmethod
    def _init_rapiddocs(cls, router: fastapi.APIRouter) -> None:
        cls.__init_upload(router=router)
        cls.__init_delete(router=router)
        cls.__init_describe(router=router)
        cls.__init_fetch(router=router)
        cls.__init_list_(router=router)
        cls.__init_query(router=router)
        cls.__init_update(router=router)

    @classmethod
    def __init_upload(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.upload)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(
            cls.upload,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.upload)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> UploadResponse:
            try:
                return cls.upload(*args, **kwargs)
            except RapiddocsHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'upload' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Rapiddocs Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.upload.__globals__)

        router.post(
            path="/data",
            response_model=UploadResponse,
            description=AbstractDataserviceService.upload.__doc__,
            **get_route_args(cls.upload, default_tag="dataservice"),
        )(wrapper)

    @classmethod
    def __init_delete(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.delete)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(
            cls.delete,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.delete)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> DeleteResponse:
            try:
                return cls.delete(*args, **kwargs)
            except RapiddocsHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'delete' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Rapiddocs Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.delete.__globals__)

        router.post(
            path="/data/delete",
            response_model=DeleteResponse,
            description=AbstractDataserviceService.delete.__doc__,
            **get_route_args(cls.delete, default_tag="dataservice"),
        )(wrapper)

    @classmethod
    def __init_describe(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.describe)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(
            cls.describe,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.describe)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> DescribeResponse:
            try:
                return cls.describe(*args, **kwargs)
            except RapiddocsHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'describe' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Rapiddocs Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.describe.__globals__)

        router.post(
            path="/data/describe",
            response_model=DescribeResponse,
            description=AbstractDataserviceService.describe.__doc__,
            **get_route_args(cls.describe, default_tag="dataservice"),
        )(wrapper)

    @classmethod
    def __init_fetch(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.fetch)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "ids":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=None))
                )
            elif parameter_name == "namespace":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=None))
                )
            else:
                new_parameters.append(parameter)
        setattr(
            cls.fetch,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.fetch)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> FetchResponse:
            try:
                return cls.fetch(*args, **kwargs)
            except RapiddocsHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'fetch' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Rapiddocs Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.fetch.__globals__)

        router.get(
            path="/data/fetch",
            response_model=FetchResponse,
            description=AbstractDataserviceService.fetch.__doc__,
            **get_route_args(cls.fetch, default_tag="dataservice"),
        )(wrapper)

    @classmethod
    def __init_list_(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.list_)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "prefix":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=None))
                )
            elif parameter_name == "limit":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=None))
                )
            elif parameter_name == "pagination_token":
                new_parameters.append(
                    parameter.replace(
                        default=fastapi.Query(default=None, alias="paginationToken")
                    )
                )
            elif parameter_name == "namespace":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=None))
                )
            else:
                new_parameters.append(parameter)
        setattr(
            cls.list_,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.list_)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> ListResponse:
            try:
                return cls.list_(*args, **kwargs)
            except RapiddocsHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'list_' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Rapiddocs Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.list_.__globals__)

        router.get(
            path="/data/list",
            response_model=ListResponse,
            description=AbstractDataserviceService.list_.__doc__,
            **get_route_args(cls.list_, default_tag="dataservice"),
        )(wrapper)

    @classmethod
    def __init_query(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.query)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(
            cls.query,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.query)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> QueryResponse:
            try:
                return cls.query(*args, **kwargs)
            except RapiddocsHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'query' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Rapiddocs Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.query.__globals__)

        router.post(
            path="/data/query",
            response_model=QueryResponse,
            description=AbstractDataserviceService.query.__doc__,
            **get_route_args(cls.query, default_tag="dataservice"),
        )(wrapper)

    @classmethod
    def __init_update(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.update)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(
            cls.update,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.update)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> UpdateResponse:
            try:
                return cls.update(*args, **kwargs)
            except RapiddocsHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'update' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Rapiddocs Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.update.__globals__)

        router.post(
            path="/data/update",
            response_model=UpdateResponse,
            description=AbstractDataserviceService.update.__doc__,
            **get_route_args(cls.update, default_tag="dataservice"),
        )(wrapper)
