/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as RapiddocsIr from "../../../../../../api/index";
import * as core from "../../../../../../core";

export const ReferencedRequestBodyType: core.serialization.Schema<
    serializers.dynamic.ReferencedRequestBodyType.Raw,
    RapiddocsIr.dynamic.ReferencedRequestBodyType
> = core.serialization
    .union("type", {
        bytes: core.serialization.object({}),
        typeReference: core.serialization.object({
            value: core.serialization.lazy(() => serializers.dynamic.TypeReference),
        }),
    })
    .transform<RapiddocsIr.dynamic.ReferencedRequestBodyType>({
        transform: (value) => {
            switch (value.type) {
                case "bytes":
                    return RapiddocsIr.dynamic.ReferencedRequestBodyType.bytes();
                case "typeReference":
                    return RapiddocsIr.dynamic.ReferencedRequestBodyType.typeReference(value.value);
                default:
                    return value as RapiddocsIr.dynamic.ReferencedRequestBodyType;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace ReferencedRequestBodyType {
    export type Raw = ReferencedRequestBodyType.Bytes | ReferencedRequestBodyType.TypeReference;

    export interface Bytes {
        type: "bytes";
    }

    export interface TypeReference {
        type: "typeReference";
        value: serializers.dynamic.TypeReference.Raw;
    }
}
