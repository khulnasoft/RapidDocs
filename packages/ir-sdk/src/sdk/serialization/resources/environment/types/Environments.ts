/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsIr from "../../../../api/index";
import * as core from "../../../../core";
import { SingleBaseUrlEnvironments } from "./SingleBaseUrlEnvironments";
import { MultipleBaseUrlsEnvironments } from "./MultipleBaseUrlsEnvironments";

export const Environments: core.serialization.Schema<serializers.Environments.Raw, RapiddocsIr.Environments> =
    core.serialization
        .union("type", {
            singleBaseUrl: SingleBaseUrlEnvironments,
            multipleBaseUrls: MultipleBaseUrlsEnvironments,
        })
        .transform<RapiddocsIr.Environments>({
            transform: (value) => {
                switch (value.type) {
                    case "singleBaseUrl":
                        return RapiddocsIr.Environments.singleBaseUrl(value);
                    case "multipleBaseUrls":
                        return RapiddocsIr.Environments.multipleBaseUrls(value);
                    default:
                        return value as RapiddocsIr.Environments;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace Environments {
    export type Raw = Environments.SingleBaseUrl | Environments.MultipleBaseUrls;

    export interface SingleBaseUrl extends SingleBaseUrlEnvironments.Raw {
        type: "singleBaseUrl";
    }

    export interface MultipleBaseUrls extends MultipleBaseUrlsEnvironments.Raw {
        type: "multipleBaseUrls";
    }
}
