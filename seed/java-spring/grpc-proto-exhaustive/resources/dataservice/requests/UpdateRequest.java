/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

package resources.dataservice.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;
import types.IndexedData;
import types.Metadata;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UpdateRequest.Builder.class
)
public final class UpdateRequest {
  private final String id;

  private final Optional<List<Double>> values;

  private final Optional<Metadata> setMetadata;

  private final Optional<String> namespace;

  private final Optional<IndexedData> indexedData;

  private UpdateRequest(String id, Optional<List<Double>> values, Optional<Metadata> setMetadata,
      Optional<String> namespace, Optional<IndexedData> indexedData) {
    this.id = id;
    this.values = values;
    this.setMetadata = setMetadata;
    this.namespace = namespace;
    this.indexedData = indexedData;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @JsonProperty("values")
  public Optional<List<Double>> getValues() {
    return values;
  }

  @JsonProperty("setMetadata")
  public Optional<Metadata> getSetMetadata() {
    return setMetadata;
  }

  @JsonProperty("namespace")
  public Optional<String> getNamespace() {
    return namespace;
  }

  @JsonProperty("indexedData")
  public Optional<IndexedData> getIndexedData() {
    return indexedData;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UpdateRequest && equalTo((UpdateRequest) other);
  }

  private boolean equalTo(UpdateRequest other) {
    return id.equals(other.id) && values.equals(other.values) && setMetadata.equals(other.setMetadata) && namespace.equals(other.namespace) && indexedData.equals(other.indexedData);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.values, this.setMetadata, this.namespace, this.indexedData);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    _FinalStage id(@NotNull String id);

    Builder from(UpdateRequest other);
  }

  public interface _FinalStage {
    UpdateRequest build();

    _FinalStage values(Optional<List<Double>> values);

    _FinalStage values(List<Double> values);

    _FinalStage setMetadata(Optional<Metadata> setMetadata);

    _FinalStage setMetadata(Metadata setMetadata);

    _FinalStage namespace(Optional<String> namespace);

    _FinalStage namespace(String namespace);

    _FinalStage indexedData(Optional<IndexedData> indexedData);

    _FinalStage indexedData(IndexedData indexedData);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, _FinalStage {
    private String id;

    private Optional<IndexedData> indexedData = Optional.empty();

    private Optional<String> namespace = Optional.empty();

    private Optional<Metadata> setMetadata = Optional.empty();

    private Optional<List<Double>> values = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(UpdateRequest other) {
      id(other.getId());
      values(other.getValues());
      setMetadata(other.getSetMetadata());
      namespace(other.getNamespace());
      indexedData(other.getIndexedData());
      return this;
    }

    @java.lang.Override
    @JsonSetter("id")
    public _FinalStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage indexedData(IndexedData indexedData) {
      this.indexedData = Optional.ofNullable(indexedData);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "indexedData",
        nulls = Nulls.SKIP
    )
    public _FinalStage indexedData(Optional<IndexedData> indexedData) {
      this.indexedData = indexedData;
      return this;
    }

    @java.lang.Override
    public _FinalStage namespace(String namespace) {
      this.namespace = Optional.ofNullable(namespace);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "namespace",
        nulls = Nulls.SKIP
    )
    public _FinalStage namespace(Optional<String> namespace) {
      this.namespace = namespace;
      return this;
    }

    @java.lang.Override
    public _FinalStage setMetadata(Metadata setMetadata) {
      this.setMetadata = Optional.ofNullable(setMetadata);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "setMetadata",
        nulls = Nulls.SKIP
    )
    public _FinalStage setMetadata(Optional<Metadata> setMetadata) {
      this.setMetadata = setMetadata;
      return this;
    }

    @java.lang.Override
    public _FinalStage values(List<Double> values) {
      this.values = Optional.ofNullable(values);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "values",
        nulls = Nulls.SKIP
    )
    public _FinalStage values(Optional<List<Double>> values) {
      this.values = values;
      return this;
    }

    @java.lang.Override
    public UpdateRequest build() {
      return new UpdateRequest(id, values, setMetadata, namespace, indexedData);
    }
  }
}
