/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as RapiddocsIr from "../../../index";

export type SdkRequestBodyType = RapiddocsIr.SdkRequestBodyType.TypeReference | RapiddocsIr.SdkRequestBodyType.Bytes;

export namespace SdkRequestBodyType {
    export interface TypeReference extends RapiddocsIr.HttpRequestBodyReference, _Utils {
        type: "typeReference";
    }

    export interface Bytes extends RapiddocsIr.BytesRequest, _Utils {
        type: "bytes";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: RapiddocsIr.SdkRequestBodyType._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        typeReference: (value: RapiddocsIr.HttpRequestBodyReference) => _Result;
        bytes: (value: RapiddocsIr.BytesRequest) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const SdkRequestBodyType = {
    typeReference: (value: RapiddocsIr.HttpRequestBodyReference): RapiddocsIr.SdkRequestBodyType.TypeReference => {
        return {
            ...value,
            type: "typeReference",
            _visit: function <_Result>(
                this: RapiddocsIr.SdkRequestBodyType.TypeReference,
                visitor: RapiddocsIr.SdkRequestBodyType._Visitor<_Result>,
            ) {
                return RapiddocsIr.SdkRequestBodyType._visit(this, visitor);
            },
        };
    },

    bytes: (value: RapiddocsIr.BytesRequest): RapiddocsIr.SdkRequestBodyType.Bytes => {
        return {
            ...value,
            type: "bytes",
            _visit: function <_Result>(
                this: RapiddocsIr.SdkRequestBodyType.Bytes,
                visitor: RapiddocsIr.SdkRequestBodyType._Visitor<_Result>,
            ) {
                return RapiddocsIr.SdkRequestBodyType._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: RapiddocsIr.SdkRequestBodyType,
        visitor: RapiddocsIr.SdkRequestBodyType._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "typeReference":
                return visitor.typeReference(value);
            case "bytes":
                return visitor.bytes(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
