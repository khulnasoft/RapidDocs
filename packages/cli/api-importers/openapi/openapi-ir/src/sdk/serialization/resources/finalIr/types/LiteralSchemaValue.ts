/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";

export const LiteralSchemaValue: core.serialization.Schema<
    serializers.LiteralSchemaValue.Raw,
    RapiddocsOpenapiIr.LiteralSchemaValue
> = core.serialization
    .union("type", {
        boolean: core.serialization.object({
            value: core.serialization.boolean(),
        }),
        string: core.serialization.object({
            value: core.serialization.string(),
        }),
    })
    .transform<RapiddocsOpenapiIr.LiteralSchemaValue>({
        transform: (value) => {
            switch (value.type) {
                case "boolean":
                    return RapiddocsOpenapiIr.LiteralSchemaValue.boolean(value.value);
                case "string":
                    return RapiddocsOpenapiIr.LiteralSchemaValue.string(value.value);
                default:
                    return value as RapiddocsOpenapiIr.LiteralSchemaValue;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace LiteralSchemaValue {
    export type Raw = LiteralSchemaValue.Boolean | LiteralSchemaValue.String;

    export interface Boolean {
        type: "boolean";
        value: boolean;
    }

    export interface String {
        type: "string";
        value: string;
    }
}
