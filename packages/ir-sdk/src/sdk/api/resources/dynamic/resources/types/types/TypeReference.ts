/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as RapiddocsIr from "../../../../../index";

export type TypeReference =
    | RapiddocsIr.dynamic.TypeReference.List
    | RapiddocsIr.dynamic.TypeReference.Literal
    | RapiddocsIr.dynamic.TypeReference.Map
    | RapiddocsIr.dynamic.TypeReference.Named
    | RapiddocsIr.dynamic.TypeReference.Nullable
    | RapiddocsIr.dynamic.TypeReference.Optional
    | RapiddocsIr.dynamic.TypeReference.Primitive
    | RapiddocsIr.dynamic.TypeReference.Set
    | RapiddocsIr.dynamic.TypeReference.Unknown;

export namespace TypeReference {
    export interface List extends _Utils {
        type: "list";
        value: RapiddocsIr.dynamic.TypeReference;
    }

    export interface Literal extends _Utils {
        type: "literal";
        value: RapiddocsIr.dynamic.LiteralType;
    }

    export interface Map extends RapiddocsIr.dynamic.MapType, _Utils {
        type: "map";
    }

    export interface Named extends _Utils {
        type: "named";
        value: RapiddocsIr.TypeId;
    }

    export interface Nullable extends _Utils {
        type: "nullable";
        value: RapiddocsIr.dynamic.TypeReference;
    }

    export interface Optional extends _Utils {
        type: "optional";
        value: RapiddocsIr.dynamic.TypeReference;
    }

    export interface Primitive extends _Utils {
        type: "primitive";
        value: RapiddocsIr.PrimitiveTypeV1;
    }

    export interface Set extends _Utils {
        type: "set";
        value: RapiddocsIr.dynamic.TypeReference;
    }

    export interface Unknown extends _Utils {
        type: "unknown";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: RapiddocsIr.dynamic.TypeReference._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        list: (value: RapiddocsIr.dynamic.TypeReference) => _Result;
        literal: (value: RapiddocsIr.dynamic.LiteralType) => _Result;
        map: (value: RapiddocsIr.dynamic.MapType) => _Result;
        named: (value: RapiddocsIr.TypeId) => _Result;
        nullable: (value: RapiddocsIr.dynamic.TypeReference) => _Result;
        optional: (value: RapiddocsIr.dynamic.TypeReference) => _Result;
        primitive: (value: RapiddocsIr.PrimitiveTypeV1) => _Result;
        set: (value: RapiddocsIr.dynamic.TypeReference) => _Result;
        unknown: () => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const TypeReference = {
    list: (value: RapiddocsIr.dynamic.TypeReference): RapiddocsIr.dynamic.TypeReference.List => {
        return {
            value: value,
            type: "list",
            _visit: function <_Result>(
                this: RapiddocsIr.dynamic.TypeReference.List,
                visitor: RapiddocsIr.dynamic.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.dynamic.TypeReference._visit(this, visitor);
            },
        };
    },

    literal: (value: RapiddocsIr.dynamic.LiteralType): RapiddocsIr.dynamic.TypeReference.Literal => {
        return {
            value: value,
            type: "literal",
            _visit: function <_Result>(
                this: RapiddocsIr.dynamic.TypeReference.Literal,
                visitor: RapiddocsIr.dynamic.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.dynamic.TypeReference._visit(this, visitor);
            },
        };
    },

    map: (value: RapiddocsIr.dynamic.MapType): RapiddocsIr.dynamic.TypeReference.Map => {
        return {
            ...value,
            type: "map",
            _visit: function <_Result>(
                this: RapiddocsIr.dynamic.TypeReference.Map,
                visitor: RapiddocsIr.dynamic.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.dynamic.TypeReference._visit(this, visitor);
            },
        };
    },

    named: (value: RapiddocsIr.TypeId): RapiddocsIr.dynamic.TypeReference.Named => {
        return {
            value: value,
            type: "named",
            _visit: function <_Result>(
                this: RapiddocsIr.dynamic.TypeReference.Named,
                visitor: RapiddocsIr.dynamic.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.dynamic.TypeReference._visit(this, visitor);
            },
        };
    },

    nullable: (value: RapiddocsIr.dynamic.TypeReference): RapiddocsIr.dynamic.TypeReference.Nullable => {
        return {
            value: value,
            type: "nullable",
            _visit: function <_Result>(
                this: RapiddocsIr.dynamic.TypeReference.Nullable,
                visitor: RapiddocsIr.dynamic.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.dynamic.TypeReference._visit(this, visitor);
            },
        };
    },

    optional: (value: RapiddocsIr.dynamic.TypeReference): RapiddocsIr.dynamic.TypeReference.Optional => {
        return {
            value: value,
            type: "optional",
            _visit: function <_Result>(
                this: RapiddocsIr.dynamic.TypeReference.Optional,
                visitor: RapiddocsIr.dynamic.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.dynamic.TypeReference._visit(this, visitor);
            },
        };
    },

    primitive: (value: RapiddocsIr.PrimitiveTypeV1): RapiddocsIr.dynamic.TypeReference.Primitive => {
        return {
            value: value,
            type: "primitive",
            _visit: function <_Result>(
                this: RapiddocsIr.dynamic.TypeReference.Primitive,
                visitor: RapiddocsIr.dynamic.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.dynamic.TypeReference._visit(this, visitor);
            },
        };
    },

    set: (value: RapiddocsIr.dynamic.TypeReference): RapiddocsIr.dynamic.TypeReference.Set => {
        return {
            value: value,
            type: "set",
            _visit: function <_Result>(
                this: RapiddocsIr.dynamic.TypeReference.Set,
                visitor: RapiddocsIr.dynamic.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.dynamic.TypeReference._visit(this, visitor);
            },
        };
    },

    unknown: (): RapiddocsIr.dynamic.TypeReference.Unknown => {
        return {
            type: "unknown",
            _visit: function <_Result>(
                this: RapiddocsIr.dynamic.TypeReference.Unknown,
                visitor: RapiddocsIr.dynamic.TypeReference._Visitor<_Result>,
            ) {
                return RapiddocsIr.dynamic.TypeReference._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: RapiddocsIr.dynamic.TypeReference,
        visitor: RapiddocsIr.dynamic.TypeReference._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "list":
                return visitor.list(value.value);
            case "literal":
                return visitor.literal(value.value);
            case "map":
                return visitor.map(value);
            case "named":
                return visitor.named(value.value);
            case "nullable":
                return visitor.nullable(value.value);
            case "optional":
                return visitor.optional(value.value);
            case "primitive":
                return visitor.primitive(value.value);
            case "set":
                return visitor.set(value.value);
            case "unknown":
                return visitor.unknown();
            default:
                return visitor._other(value as any);
        }
    },
} as const;
