/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";
import { StreamingResponseExample } from "./StreamingResponseExample";

export const EndpointResponseExample: core.serialization.Schema<
    serializers.EndpointResponseExample.Raw,
    RapiddocsOpenapiIr.EndpointResponseExample
> = core.serialization
    .union("type", {
        withStreaming: StreamingResponseExample,
        withoutStreaming: core.serialization.object({
            value: core.serialization.lazy(() => serializers.FullExample),
        }),
    })
    .transform<RapiddocsOpenapiIr.EndpointResponseExample>({
        transform: (value) => {
            switch (value.type) {
                case "withStreaming":
                    return RapiddocsOpenapiIr.EndpointResponseExample.withStreaming(value);
                case "withoutStreaming":
                    return RapiddocsOpenapiIr.EndpointResponseExample.withoutStreaming(value.value);
                default:
                    return value as RapiddocsOpenapiIr.EndpointResponseExample;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace EndpointResponseExample {
    export type Raw = EndpointResponseExample.WithStreaming | EndpointResponseExample.WithoutStreaming;

    export interface WithStreaming extends StreamingResponseExample.Raw {
        type: "withStreaming";
    }

    export interface WithoutStreaming {
        type: "withoutStreaming";
        value: serializers.FullExample.Raw;
    }
}
