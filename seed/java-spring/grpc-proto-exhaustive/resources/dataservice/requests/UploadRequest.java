/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

package resources.dataservice.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import types.Column;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UploadRequest.Builder.class
)
public final class UploadRequest {
  private final List<Column> columns;

  private final Optional<String> namespace;

  private UploadRequest(List<Column> columns, Optional<String> namespace) {
    this.columns = columns;
    this.namespace = namespace;
  }

  @JsonProperty("columns")
  public List<Column> getColumns() {
    return columns;
  }

  @JsonProperty("namespace")
  public Optional<String> getNamespace() {
    return namespace;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UploadRequest && equalTo((UploadRequest) other);
  }

  private boolean equalTo(UploadRequest other) {
    return columns.equals(other.columns) && namespace.equals(other.namespace);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.columns, this.namespace);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private List<Column> columns = new ArrayList<>();

    private Optional<String> namespace = Optional.empty();

    private Builder() {
    }

    public Builder from(UploadRequest other) {
      columns(other.getColumns());
      namespace(other.getNamespace());
      return this;
    }

    @JsonSetter(
        value = "columns",
        nulls = Nulls.SKIP
    )
    public Builder columns(List<Column> columns) {
      this.columns.clear();
      this.columns.addAll(columns);
      return this;
    }

    public Builder addColumns(Column columns) {
      this.columns.add(columns);
      return this;
    }

    public Builder addAllColumns(List<Column> columns) {
      this.columns.addAll(columns);
      return this;
    }

    @JsonSetter(
        value = "namespace",
        nulls = Nulls.SKIP
    )
    public Builder namespace(Optional<String> namespace) {
      this.namespace = namespace;
      return this;
    }

    public Builder namespace(String namespace) {
      this.namespace = Optional.ofNullable(namespace);
      return this;
    }

    public UploadRequest build() {
      return new UploadRequest(columns, namespace);
    }
  }
}
