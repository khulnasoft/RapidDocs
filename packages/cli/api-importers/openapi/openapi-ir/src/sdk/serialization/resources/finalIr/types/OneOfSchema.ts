/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";

export const OneOfSchema: core.serialization.Schema<serializers.OneOfSchema.Raw, RapiddocsOpenapiIr.OneOfSchema> =
    core.serialization
        .union("type", {
            discriminated: core.serialization.lazyObject(() => serializers.DiscriminatedOneOfSchema),
            undiscriminated: core.serialization.lazyObject(() => serializers.UnDiscriminatedOneOfSchema),
        })
        .transform<RapiddocsOpenapiIr.OneOfSchema>({
            transform: (value) => {
                switch (value.type) {
                    case "discriminated":
                        return RapiddocsOpenapiIr.OneOfSchema.discriminated(value);
                    case "undiscriminated":
                        return RapiddocsOpenapiIr.OneOfSchema.undiscriminated(value);
                    default:
                        return value as RapiddocsOpenapiIr.OneOfSchema;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace OneOfSchema {
    export type Raw = OneOfSchema.Discriminated | OneOfSchema.Undiscriminated;

    export interface Discriminated extends serializers.DiscriminatedOneOfSchema.Raw {
        type: "discriminated";
    }

    export interface Undiscriminated extends serializers.UnDiscriminatedOneOfSchema.Raw {
        type: "undiscriminated";
    }
}
