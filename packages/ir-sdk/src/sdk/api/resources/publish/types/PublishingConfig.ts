/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as RapiddocsIr from "../../../index";

export type PublishingConfig =
    /**
     * Publish via syncing to a GitHub repo and triggering GitHub workflows */
    | RapiddocsIr.PublishingConfig.Github
    /**
     * Publish directly from the generator */
    | RapiddocsIr.PublishingConfig.Direct;

export namespace PublishingConfig {
    export interface Github extends RapiddocsIr.GithubPublish, _Utils {
        type: "github";
    }

    export interface Direct extends RapiddocsIr.DirectPublish, _Utils {
        type: "direct";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: RapiddocsIr.PublishingConfig._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        github: (value: RapiddocsIr.GithubPublish) => _Result;
        direct: (value: RapiddocsIr.DirectPublish) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const PublishingConfig = {
    github: (value: RapiddocsIr.GithubPublish): RapiddocsIr.PublishingConfig.Github => {
        return {
            ...value,
            type: "github",
            _visit: function <_Result>(
                this: RapiddocsIr.PublishingConfig.Github,
                visitor: RapiddocsIr.PublishingConfig._Visitor<_Result>,
            ) {
                return RapiddocsIr.PublishingConfig._visit(this, visitor);
            },
        };
    },

    direct: (value: RapiddocsIr.DirectPublish): RapiddocsIr.PublishingConfig.Direct => {
        return {
            ...value,
            type: "direct",
            _visit: function <_Result>(
                this: RapiddocsIr.PublishingConfig.Direct,
                visitor: RapiddocsIr.PublishingConfig._Visitor<_Result>,
            ) {
                return RapiddocsIr.PublishingConfig._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: RapiddocsIr.PublishingConfig, visitor: RapiddocsIr.PublishingConfig._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "github":
                return visitor.github(value);
            case "direct":
                return visitor.direct(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
