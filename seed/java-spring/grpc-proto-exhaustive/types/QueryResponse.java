/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = QueryResponse.Builder.class
)
public final class QueryResponse {
  private final Optional<List<QueryResult>> results;

  private final Optional<List<ScoredColumn>> matches;

  private final Optional<String> namespace;

  private final Optional<Usage> usage;

  private QueryResponse(Optional<List<QueryResult>> results, Optional<List<ScoredColumn>> matches,
      Optional<String> namespace, Optional<Usage> usage) {
    this.results = results;
    this.matches = matches;
    this.namespace = namespace;
    this.usage = usage;
  }

  @JsonProperty("results")
  public Optional<List<QueryResult>> getResults() {
    return results;
  }

  @JsonProperty("matches")
  public Optional<List<ScoredColumn>> getMatches() {
    return matches;
  }

  @JsonProperty("namespace")
  public Optional<String> getNamespace() {
    return namespace;
  }

  @JsonProperty("usage")
  public Optional<Usage> getUsage() {
    return usage;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof QueryResponse && equalTo((QueryResponse) other);
  }

  private boolean equalTo(QueryResponse other) {
    return results.equals(other.results) && matches.equals(other.matches) && namespace.equals(other.namespace) && usage.equals(other.usage);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.results, this.matches, this.namespace, this.usage);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<List<QueryResult>> results = Optional.empty();

    private Optional<List<ScoredColumn>> matches = Optional.empty();

    private Optional<String> namespace = Optional.empty();

    private Optional<Usage> usage = Optional.empty();

    private Builder() {
    }

    public Builder from(QueryResponse other) {
      results(other.getResults());
      matches(other.getMatches());
      namespace(other.getNamespace());
      usage(other.getUsage());
      return this;
    }

    @JsonSetter(
        value = "results",
        nulls = Nulls.SKIP
    )
    public Builder results(Optional<List<QueryResult>> results) {
      this.results = results;
      return this;
    }

    public Builder results(List<QueryResult> results) {
      this.results = Optional.ofNullable(results);
      return this;
    }

    @JsonSetter(
        value = "matches",
        nulls = Nulls.SKIP
    )
    public Builder matches(Optional<List<ScoredColumn>> matches) {
      this.matches = matches;
      return this;
    }

    public Builder matches(List<ScoredColumn> matches) {
      this.matches = Optional.ofNullable(matches);
      return this;
    }

    @JsonSetter(
        value = "namespace",
        nulls = Nulls.SKIP
    )
    public Builder namespace(Optional<String> namespace) {
      this.namespace = namespace;
      return this;
    }

    public Builder namespace(String namespace) {
      this.namespace = Optional.ofNullable(namespace);
      return this;
    }

    @JsonSetter(
        value = "usage",
        nulls = Nulls.SKIP
    )
    public Builder usage(Optional<Usage> usage) {
      this.usage = usage;
      return this;
    }

    public Builder usage(Usage usage) {
      this.usage = Optional.ofNullable(usage);
      return this;
    }

    public QueryResponse build() {
      return new QueryResponse(results, matches, namespace, usage);
    }
  }
}
