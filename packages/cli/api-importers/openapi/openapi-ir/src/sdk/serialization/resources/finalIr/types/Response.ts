/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";
import { FileResponse } from "./FileResponse";
import { JsonResponse } from "./JsonResponse";
import { TextResponse } from "./TextResponse";

export const Response: core.serialization.Schema<serializers.Response.Raw, RapiddocsOpenapiIr.Response> = core.serialization
    .union("type", {
        file: FileResponse,
        json: JsonResponse,
        text: TextResponse,
        streamingSse: JsonResponse,
        streamingText: TextResponse,
        streamingJson: JsonResponse,
    })
    .transform<RapiddocsOpenapiIr.Response>({
        transform: (value) => {
            switch (value.type) {
                case "file":
                    return RapiddocsOpenapiIr.Response.file(value);
                case "json":
                    return RapiddocsOpenapiIr.Response.json(value);
                case "text":
                    return RapiddocsOpenapiIr.Response.text(value);
                case "streamingSse":
                    return RapiddocsOpenapiIr.Response.streamingSse(value);
                case "streamingText":
                    return RapiddocsOpenapiIr.Response.streamingText(value);
                case "streamingJson":
                    return RapiddocsOpenapiIr.Response.streamingJson(value);
                default:
                    return value as RapiddocsOpenapiIr.Response;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Response {
    export type Raw =
        | Response.File
        | Response.Json
        | Response.Text
        | Response.StreamingSse
        | Response.StreamingText
        | Response.StreamingJson;

    export interface File extends FileResponse.Raw {
        type: "file";
    }

    export interface Json extends JsonResponse.Raw {
        type: "json";
    }

    export interface Text extends TextResponse.Raw {
        type: "text";
    }

    export interface StreamingSse extends JsonResponse.Raw {
        type: "streamingSse";
    }

    export interface StreamingText extends TextResponse.Raw {
        type: "streamingText";
    }

    export interface StreamingJson extends JsonResponse.Raw {
        type: "streamingJson";
    }
}
