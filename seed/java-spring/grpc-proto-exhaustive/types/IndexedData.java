/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = IndexedData.Builder.class
)
public final class IndexedData {
  private final List<Integer> indices;

  private final List<Double> values;

  private IndexedData(List<Integer> indices, List<Double> values) {
    this.indices = indices;
    this.values = values;
  }

  @JsonProperty("indices")
  public List<Integer> getIndices() {
    return indices;
  }

  @JsonProperty("values")
  public List<Double> getValues() {
    return values;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof IndexedData && equalTo((IndexedData) other);
  }

  private boolean equalTo(IndexedData other) {
    return indices.equals(other.indices) && values.equals(other.values);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.indices, this.values);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private List<Integer> indices = new ArrayList<>();

    private List<Double> values = new ArrayList<>();

    private Builder() {
    }

    public Builder from(IndexedData other) {
      indices(other.getIndices());
      values(other.getValues());
      return this;
    }

    @JsonSetter(
        value = "indices",
        nulls = Nulls.SKIP
    )
    public Builder indices(List<Integer> indices) {
      this.indices.clear();
      this.indices.addAll(indices);
      return this;
    }

    public Builder addIndices(Integer indices) {
      this.indices.add(indices);
      return this;
    }

    public Builder addAllIndices(List<Integer> indices) {
      this.indices.addAll(indices);
      return this;
    }

    @JsonSetter(
        value = "values",
        nulls = Nulls.SKIP
    )
    public Builder values(List<Double> values) {
      this.values.clear();
      this.values.addAll(values);
      return this;
    }

    public Builder addValues(Double values) {
      this.values.add(values);
      return this;
    }

    public Builder addAllValues(List<Double> values) {
      this.values.addAll(values);
      return this;
    }

    public IndexedData build() {
      return new IndexedData(indices, values);
    }
  }
}
