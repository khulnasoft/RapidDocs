/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as RapiddocsIr from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { RemoteGeneratorEnvironment } from "./RemoteGeneratorEnvironment";

export const GeneratorEnvironment: core.serialization.Schema<
    serializers.generatorExec.GeneratorEnvironment.Raw,
    RapiddocsIr.generatorExec.GeneratorEnvironment
> = core.serialization
    .union(core.serialization.discriminant("type", "_type"), {
        local: core.serialization.object({}),
        remote: RemoteGeneratorEnvironment,
    })
    .transform<RapiddocsIr.generatorExec.GeneratorEnvironment>({
        transform: (value) => {
            switch (value.type) {
                case "local":
                    return RapiddocsIr.generatorExec.GeneratorEnvironment.local();
                case "remote":
                    return RapiddocsIr.generatorExec.GeneratorEnvironment.remote(value);
                default:
                    return value as RapiddocsIr.generatorExec.GeneratorEnvironment;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace GeneratorEnvironment {
    export type Raw = GeneratorEnvironment.Local | GeneratorEnvironment.Remote;

    export interface Local {
        _type: "local";
    }

    export interface Remote extends RemoteGeneratorEnvironment.Raw {
        _type: "remote";
    }
}
