/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsIr from "../../../../api/index";
import * as core from "../../../../core";
import { WellKnownProtobufType } from "./WellKnownProtobufType";
import { UserDefinedProtobufType } from "./UserDefinedProtobufType";

export const ProtobufType: core.serialization.Schema<serializers.ProtobufType.Raw, RapiddocsIr.ProtobufType> =
    core.serialization
        .union("type", {
            wellKnown: core.serialization.object({
                value: WellKnownProtobufType,
            }),
            userDefined: UserDefinedProtobufType,
        })
        .transform<RapiddocsIr.ProtobufType>({
            transform: (value) => {
                switch (value.type) {
                    case "wellKnown":
                        return RapiddocsIr.ProtobufType.wellKnown(value.value);
                    case "userDefined":
                        return RapiddocsIr.ProtobufType.userDefined(value);
                    default:
                        return value as RapiddocsIr.ProtobufType;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace ProtobufType {
    export type Raw = ProtobufType.WellKnown | ProtobufType.UserDefined;

    export interface WellKnown {
        type: "wellKnown";
        value: WellKnownProtobufType.Raw;
    }

    export interface UserDefined extends UserDefinedProtobufType.Raw {
        type: "userDefined";
    }
}
