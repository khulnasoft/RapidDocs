/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as core from "./core";
import * as SeedObject from "./api/index";
import urlJoin from "url-join";
import * as errors from "./errors/index";

export declare namespace SeedObjectClient {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class SeedObjectClient {
    constructor(protected readonly _options: SeedObjectClient.Options) {}

    /**
     * @param {SeedObject.PostRootRequest} request
     * @param {SeedObjectClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getRoot({
     *         bar: {
     *             foo: "foo"
     *         },
     *         foo: "foo"
     *     })
     */
    public async getRoot(
        request: SeedObject.PostRootRequest,
        requestOptions?: SeedObjectClient.RequestOptions,
    ): Promise<SeedObject.RootType1> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/root/root",
            ),
            method: "POST",
            headers: {
                "X-Rapiddocs-Language": "JavaScript",
                "X-Rapiddocs-SDK-Name": "@rapiddocs/ts-inline-types",
                "X-Rapiddocs-SDK-Version": "0.0.1",
                "User-Agent": "@rapiddocs/ts-inline-types/0.0.1",
                "X-Rapiddocs-Runtime": core.RUNTIME.type,
                "X-Rapiddocs-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as SeedObject.RootType1;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedObjectError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedObjectError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedObjectTimeoutError("Timeout exceeded when calling POST /root/root.");
            case "unknown":
                throw new errors.SeedObjectError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {SeedObject.GetDiscriminatedUnionRequest} request
     * @param {SeedObjectClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getDiscriminatedUnion({
     *         bar: {
     *             type: "type1",
     *             foo: "foo",
     *             bar: {
     *                 foo: "foo",
     *                 ref: {
     *                     foo: "foo"
     *                 }
     *             },
     *             ref: {
     *                 foo: "foo"
     *             }
     *         },
     *         foo: "foo"
     *     })
     */
    public async getDiscriminatedUnion(
        request: SeedObject.GetDiscriminatedUnionRequest,
        requestOptions?: SeedObjectClient.RequestOptions,
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/root/discriminated-union",
            ),
            method: "POST",
            headers: {
                "X-Rapiddocs-Language": "JavaScript",
                "X-Rapiddocs-SDK-Name": "@rapiddocs/ts-inline-types",
                "X-Rapiddocs-SDK-Version": "0.0.1",
                "User-Agent": "@rapiddocs/ts-inline-types/0.0.1",
                "X-Rapiddocs-Runtime": core.RUNTIME.type,
                "X-Rapiddocs-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedObjectError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedObjectError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedObjectTimeoutError(
                    "Timeout exceeded when calling POST /root/discriminated-union.",
                );
            case "unknown":
                throw new errors.SeedObjectError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {SeedObject.GetUndiscriminatedUnionRequest} request
     * @param {SeedObjectClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getUndiscriminatedUnion({
     *         bar: {
     *             foo: "foo",
     *             bar: {
     *                 foo: "foo",
     *                 ref: {
     *                     foo: "foo"
     *                 }
     *             },
     *             ref: {
     *                 foo: "foo"
     *             }
     *         },
     *         foo: "foo"
     *     })
     */
    public async getUndiscriminatedUnion(
        request: SeedObject.GetUndiscriminatedUnionRequest,
        requestOptions?: SeedObjectClient.RequestOptions,
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/root/undiscriminated-union",
            ),
            method: "POST",
            headers: {
                "X-Rapiddocs-Language": "JavaScript",
                "X-Rapiddocs-SDK-Name": "@rapiddocs/ts-inline-types",
                "X-Rapiddocs-SDK-Version": "0.0.1",
                "User-Agent": "@rapiddocs/ts-inline-types/0.0.1",
                "X-Rapiddocs-Runtime": core.RUNTIME.type,
                "X-Rapiddocs-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedObjectError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedObjectError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedObjectTimeoutError(
                    "Timeout exceeded when calling POST /root/undiscriminated-union.",
                );
            case "unknown":
                throw new errors.SeedObjectError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
