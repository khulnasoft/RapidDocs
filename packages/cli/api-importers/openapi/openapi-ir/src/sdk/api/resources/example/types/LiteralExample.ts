/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as RapiddocsOpenapiIr from "../../../index";

export type LiteralExample = RapiddocsOpenapiIr.LiteralExample.Boolean | RapiddocsOpenapiIr.LiteralExample.String;

export namespace LiteralExample {
    export interface Boolean extends _Utils {
        type: "boolean";
        value: boolean;
    }

    export interface String extends _Utils {
        type: "string";
        value: string;
    }

    export interface _Utils {
        _visit: <_Result>(visitor: RapiddocsOpenapiIr.LiteralExample._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        boolean: (value: boolean) => _Result;
        string: (value: string) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const LiteralExample = {
    boolean: (value: boolean): RapiddocsOpenapiIr.LiteralExample.Boolean => {
        return {
            value: value,
            type: "boolean",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.LiteralExample.Boolean,
                visitor: RapiddocsOpenapiIr.LiteralExample._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.LiteralExample._visit(this, visitor);
            },
        };
    },

    string: (value: string): RapiddocsOpenapiIr.LiteralExample.String => {
        return {
            value: value,
            type: "string",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.LiteralExample.String,
                visitor: RapiddocsOpenapiIr.LiteralExample._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.LiteralExample._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: RapiddocsOpenapiIr.LiteralExample,
        visitor: RapiddocsOpenapiIr.LiteralExample._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "boolean":
                return visitor.boolean(value.value);
            case "string":
                return visitor.string(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
