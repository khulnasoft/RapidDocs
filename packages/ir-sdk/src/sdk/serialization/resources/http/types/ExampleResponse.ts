/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsIr from "../../../../api/index";
import * as core from "../../../../core";
import { ExampleEndpointSuccessResponse } from "./ExampleEndpointSuccessResponse";
import { ExampleEndpointErrorResponse } from "./ExampleEndpointErrorResponse";

export const ExampleResponse: core.serialization.Schema<serializers.ExampleResponse.Raw, RapiddocsIr.ExampleResponse> =
    core.serialization
        .union("type", {
            ok: core.serialization.object({
                value: ExampleEndpointSuccessResponse,
            }),
            error: ExampleEndpointErrorResponse,
        })
        .transform<RapiddocsIr.ExampleResponse>({
            transform: (value) => {
                switch (value.type) {
                    case "ok":
                        return RapiddocsIr.ExampleResponse.ok(value.value);
                    case "error":
                        return RapiddocsIr.ExampleResponse.error(value);
                    default:
                        return value as RapiddocsIr.ExampleResponse;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace ExampleResponse {
    export type Raw = ExampleResponse.Ok | ExampleResponse.Error;

    export interface Ok {
        type: "ok";
        value: ExampleEndpointSuccessResponse.Raw;
    }

    export interface Error extends ExampleEndpointErrorResponse.Raw {
        type: "error";
    }
}
