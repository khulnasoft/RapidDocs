/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsIr from "../../../../api/index";
import * as core from "../../../../core";
import { JsonResponse } from "./JsonResponse";
import { FileDownloadResponse } from "./FileDownloadResponse";
import { TextResponse } from "./TextResponse";
import { BytesResponse } from "./BytesResponse";
import { StreamingResponse } from "./StreamingResponse";
import { StreamParameterResponse } from "./StreamParameterResponse";

export const HttpResponseBody: core.serialization.Schema<serializers.HttpResponseBody.Raw, RapiddocsIr.HttpResponseBody> =
    core.serialization
        .union("type", {
            json: core.serialization.object({
                value: JsonResponse,
            }),
            fileDownload: FileDownloadResponse,
            text: TextResponse,
            bytes: BytesResponse,
            streaming: core.serialization.object({
                value: StreamingResponse,
            }),
            streamParameter: StreamParameterResponse,
        })
        .transform<RapiddocsIr.HttpResponseBody>({
            transform: (value) => {
                switch (value.type) {
                    case "json":
                        return RapiddocsIr.HttpResponseBody.json(value.value);
                    case "fileDownload":
                        return RapiddocsIr.HttpResponseBody.fileDownload(value);
                    case "text":
                        return RapiddocsIr.HttpResponseBody.text(value);
                    case "bytes":
                        return RapiddocsIr.HttpResponseBody.bytes(value);
                    case "streaming":
                        return RapiddocsIr.HttpResponseBody.streaming(value.value);
                    case "streamParameter":
                        return RapiddocsIr.HttpResponseBody.streamParameter(value);
                    default:
                        return value as RapiddocsIr.HttpResponseBody;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace HttpResponseBody {
    export type Raw =
        | HttpResponseBody.Json
        | HttpResponseBody.FileDownload
        | HttpResponseBody.Text
        | HttpResponseBody.Bytes
        | HttpResponseBody.Streaming
        | HttpResponseBody.StreamParameter;

    export interface Json {
        type: "json";
        value: JsonResponse.Raw;
    }

    export interface FileDownload extends FileDownloadResponse.Raw {
        type: "fileDownload";
    }

    export interface Text extends TextResponse.Raw {
        type: "text";
    }

    export interface Bytes extends BytesResponse.Raw {
        type: "bytes";
    }

    export interface Streaming {
        type: "streaming";
        value: StreamingResponse.Raw;
    }

    export interface StreamParameter extends StreamParameterResponse.Raw {
        type: "streamParameter";
    }
}
