/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UserModel.Builder.class
)
public final class UserModel {
  private final Optional<String> username;

  private final Optional<String> email;

  private final Optional<Integer> age;

  private final Optional<Double> weight;

  private final Optional<Metadata> metadata;

  private UserModel(Optional<String> username, Optional<String> email, Optional<Integer> age,
      Optional<Double> weight, Optional<Metadata> metadata) {
    this.username = username;
    this.email = email;
    this.age = age;
    this.weight = weight;
    this.metadata = metadata;
  }

  @JsonProperty("username")
  public Optional<String> getUsername() {
    return username;
  }

  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  @JsonProperty("age")
  public Optional<Integer> getAge() {
    return age;
  }

  @JsonProperty("weight")
  public Optional<Double> getWeight() {
    return weight;
  }

  @JsonProperty("metadata")
  public Optional<Metadata> getMetadata() {
    return metadata;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UserModel && equalTo((UserModel) other);
  }

  private boolean equalTo(UserModel other) {
    return username.equals(other.username) && email.equals(other.email) && age.equals(other.age) && weight.equals(other.weight) && metadata.equals(other.metadata);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.username, this.email, this.age, this.weight, this.metadata);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> username = Optional.empty();

    private Optional<String> email = Optional.empty();

    private Optional<Integer> age = Optional.empty();

    private Optional<Double> weight = Optional.empty();

    private Optional<Metadata> metadata = Optional.empty();

    private Builder() {
    }

    public Builder from(UserModel other) {
      username(other.getUsername());
      email(other.getEmail());
      age(other.getAge());
      weight(other.getWeight());
      metadata(other.getMetadata());
      return this;
    }

    @JsonSetter(
        value = "username",
        nulls = Nulls.SKIP
    )
    public Builder username(Optional<String> username) {
      this.username = username;
      return this;
    }

    public Builder username(String username) {
      this.username = Optional.ofNullable(username);
      return this;
    }

    @JsonSetter(
        value = "email",
        nulls = Nulls.SKIP
    )
    public Builder email(Optional<String> email) {
      this.email = email;
      return this;
    }

    public Builder email(String email) {
      this.email = Optional.ofNullable(email);
      return this;
    }

    @JsonSetter(
        value = "age",
        nulls = Nulls.SKIP
    )
    public Builder age(Optional<Integer> age) {
      this.age = age;
      return this;
    }

    public Builder age(Integer age) {
      this.age = Optional.ofNullable(age);
      return this;
    }

    @JsonSetter(
        value = "weight",
        nulls = Nulls.SKIP
    )
    public Builder weight(Optional<Double> weight) {
      this.weight = weight;
      return this;
    }

    public Builder weight(Double weight) {
      this.weight = Optional.ofNullable(weight);
      return this;
    }

    @JsonSetter(
        value = "metadata",
        nulls = Nulls.SKIP
    )
    public Builder metadata(Optional<Metadata> metadata) {
      this.metadata = metadata;
      return this;
    }

    public Builder metadata(Metadata metadata) {
      this.metadata = Optional.ofNullable(metadata);
      return this;
    }

    public UserModel build() {
      return new UserModel(username, email, age, weight, metadata);
    }
  }
}
