/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsIr from "../../../../api/index";
import * as core from "../../../../core";
import { AliasTypeDeclaration } from "./AliasTypeDeclaration";
import { EnumTypeDeclaration } from "./EnumTypeDeclaration";
import { ObjectTypeDeclaration } from "./ObjectTypeDeclaration";
import { UnionTypeDeclaration } from "./UnionTypeDeclaration";
import { UndiscriminatedUnionTypeDeclaration } from "./UndiscriminatedUnionTypeDeclaration";

export const Type: core.serialization.Schema<serializers.Type.Raw, RapiddocsIr.Type> = core.serialization
    .union(core.serialization.discriminant("type", "_type"), {
        alias: AliasTypeDeclaration,
        enum: EnumTypeDeclaration,
        object: ObjectTypeDeclaration,
        union: UnionTypeDeclaration,
        undiscriminatedUnion: UndiscriminatedUnionTypeDeclaration,
    })
    .transform<RapiddocsIr.Type>({
        transform: (value) => {
            switch (value.type) {
                case "alias":
                    return RapiddocsIr.Type.alias(value);
                case "enum":
                    return RapiddocsIr.Type.enum(value);
                case "object":
                    return RapiddocsIr.Type.object(value);
                case "union":
                    return RapiddocsIr.Type.union(value);
                case "undiscriminatedUnion":
                    return RapiddocsIr.Type.undiscriminatedUnion(value);
                default:
                    return value as RapiddocsIr.Type;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Type {
    export type Raw = Type.Alias | Type.Enum | Type.Object | Type.Union | Type.UndiscriminatedUnion;

    export interface Alias extends AliasTypeDeclaration.Raw {
        _type: "alias";
    }

    export interface Enum extends EnumTypeDeclaration.Raw {
        _type: "enum";
    }

    export interface Object extends ObjectTypeDeclaration.Raw {
        _type: "object";
    }

    export interface Union extends UnionTypeDeclaration.Raw {
        _type: "union";
    }

    export interface UndiscriminatedUnion extends UndiscriminatedUnionTypeDeclaration.Raw {
        _type: "undiscriminatedUnion";
    }
}
