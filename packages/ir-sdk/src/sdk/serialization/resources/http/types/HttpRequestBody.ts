/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as serializers from "../../../index";
import * as RapiddocsIr from "../../../../api/index";
import * as core from "../../../../core";
import { InlinedRequestBody } from "./InlinedRequestBody";
import { HttpRequestBodyReference } from "./HttpRequestBodyReference";
import { FileUploadRequest } from "./FileUploadRequest";
import { BytesRequest } from "./BytesRequest";

export const HttpRequestBody: core.serialization.Schema<serializers.HttpRequestBody.Raw, RapiddocsIr.HttpRequestBody> =
    core.serialization
        .union("type", {
            inlinedRequestBody: InlinedRequestBody,
            reference: HttpRequestBodyReference,
            fileUpload: FileUploadRequest,
            bytes: BytesRequest,
        })
        .transform<RapiddocsIr.HttpRequestBody>({
            transform: (value) => {
                switch (value.type) {
                    case "inlinedRequestBody":
                        return RapiddocsIr.HttpRequestBody.inlinedRequestBody(value);
                    case "reference":
                        return RapiddocsIr.HttpRequestBody.reference(value);
                    case "fileUpload":
                        return RapiddocsIr.HttpRequestBody.fileUpload(value);
                    case "bytes":
                        return RapiddocsIr.HttpRequestBody.bytes(value);
                    default:
                        return value as RapiddocsIr.HttpRequestBody;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace HttpRequestBody {
    export type Raw =
        | HttpRequestBody.InlinedRequestBody
        | HttpRequestBody.Reference
        | HttpRequestBody.FileUpload
        | HttpRequestBody.Bytes;

    export interface InlinedRequestBody extends InlinedRequestBody.Raw {
        type: "inlinedRequestBody";
    }

    export interface Reference extends HttpRequestBodyReference.Raw {
        type: "reference";
    }

    export interface FileUpload extends FileUploadRequest.Raw {
        type: "fileUpload";
    }

    export interface Bytes extends BytesRequest.Raw {
        type: "bytes";
    }
}
