/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as SeedApi from "../../../index";
import express from "express";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export interface DataserviceServiceMethods {
    upload(
        req: express.Request<never, SeedApi.UploadResponse, SeedApi.UploadRequest, never>,
        res: {
            send: (responseBody: SeedApi.UploadResponse) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction,
    ): void | Promise<void>;
    delete(
        req: express.Request<never, SeedApi.DeleteResponse, SeedApi.DeleteRequest, never>,
        res: {
            send: (responseBody: SeedApi.DeleteResponse) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction,
    ): void | Promise<void>;
    describe(
        req: express.Request<never, SeedApi.DescribeResponse, SeedApi.DescribeRequest, never>,
        res: {
            send: (responseBody: SeedApi.DescribeResponse) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction,
    ): void | Promise<void>;
    fetch(
        req: express.Request<
            never,
            SeedApi.FetchResponse,
            never,
            {
                ids?: string;
                namespace?: string;
            }
        >,
        res: {
            send: (responseBody: SeedApi.FetchResponse) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction,
    ): void | Promise<void>;
    list(
        req: express.Request<
            never,
            SeedApi.ListResponse,
            never,
            {
                prefix?: string;
                limit?: number;
                paginationToken?: string;
                namespace?: string;
            }
        >,
        res: {
            send: (responseBody: SeedApi.ListResponse) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction,
    ): void | Promise<void>;
    query(
        req: express.Request<never, SeedApi.QueryResponse, SeedApi.QueryRequest, never>,
        res: {
            send: (responseBody: SeedApi.QueryResponse) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction,
    ): void | Promise<void>;
    update(
        req: express.Request<never, SeedApi.UpdateResponse, SeedApi.UpdateRequest, never>,
        res: {
            send: (responseBody: SeedApi.UpdateResponse) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction,
    ): void | Promise<void>;
}

export class DataserviceService {
    private router;

    constructor(
        private readonly methods: DataserviceServiceMethods,
        middleware: express.RequestHandler[] = [],
    ) {
        this.router = express.Router({ mergeParams: true }).use(
            express.json({
                strict: false,
            }),
            ...middleware,
        );
    }

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.post("/data", async (req, res, next) => {
            const request = serializers.UploadRequest.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    await this.methods.upload(
                        req as any,
                        {
                            send: async (responseBody) => {
                                res.json(
                                    serializers.UploadResponse.jsonOrThrow(responseBody, {
                                        unrecognizedObjectKeys: "strip",
                                    }),
                                );
                            },
                            cookie: res.cookie.bind(res),
                            locals: res.locals,
                        },
                        next,
                    );
                    next();
                } catch (error) {
                    if (error instanceof errors.SeedApiError) {
                        console.warn(
                            `Endpoint 'upload' unexpectedly threw ${error.constructor.name}.` +
                                ` If this was intentional, please add ${error.constructor.name} to` +
                                " the endpoint's errors list in your Rapiddocs Definition.",
                        );
                        await error.send(res);
                    } else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            } else {
                res.status(422).json({
                    errors: request.errors.map(
                        (error) => ["request", ...error.path].join(" -> ") + ": " + error.message,
                    ),
                });
                next(request.errors);
            }
        });
        this.router.post("/data/delete", async (req, res, next) => {
            const request = serializers.DeleteRequest.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    await this.methods.delete(
                        req as any,
                        {
                            send: async (responseBody) => {
                                res.json(
                                    serializers.DeleteResponse.jsonOrThrow(responseBody, {
                                        unrecognizedObjectKeys: "strip",
                                    }),
                                );
                            },
                            cookie: res.cookie.bind(res),
                            locals: res.locals,
                        },
                        next,
                    );
                    next();
                } catch (error) {
                    if (error instanceof errors.SeedApiError) {
                        console.warn(
                            `Endpoint 'delete' unexpectedly threw ${error.constructor.name}.` +
                                ` If this was intentional, please add ${error.constructor.name} to` +
                                " the endpoint's errors list in your Rapiddocs Definition.",
                        );
                        await error.send(res);
                    } else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            } else {
                res.status(422).json({
                    errors: request.errors.map(
                        (error) => ["request", ...error.path].join(" -> ") + ": " + error.message,
                    ),
                });
                next(request.errors);
            }
        });
        this.router.post("/data/describe", async (req, res, next) => {
            const request = serializers.DescribeRequest.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    await this.methods.describe(
                        req as any,
                        {
                            send: async (responseBody) => {
                                res.json(
                                    serializers.DescribeResponse.jsonOrThrow(responseBody, {
                                        unrecognizedObjectKeys: "strip",
                                    }),
                                );
                            },
                            cookie: res.cookie.bind(res),
                            locals: res.locals,
                        },
                        next,
                    );
                    next();
                } catch (error) {
                    if (error instanceof errors.SeedApiError) {
                        console.warn(
                            `Endpoint 'describe' unexpectedly threw ${error.constructor.name}.` +
                                ` If this was intentional, please add ${error.constructor.name} to` +
                                " the endpoint's errors list in your Rapiddocs Definition.",
                        );
                        await error.send(res);
                    } else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            } else {
                res.status(422).json({
                    errors: request.errors.map(
                        (error) => ["request", ...error.path].join(" -> ") + ": " + error.message,
                    ),
                });
                next(request.errors);
            }
        });
        this.router.get("/data/fetch", async (req, res, next) => {
            try {
                await this.methods.fetch(
                    req as any,
                    {
                        send: async (responseBody) => {
                            res.json(
                                serializers.FetchResponse.jsonOrThrow(responseBody, {
                                    unrecognizedObjectKeys: "strip",
                                }),
                            );
                        },
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    },
                    next,
                );
                next();
            } catch (error) {
                if (error instanceof errors.SeedApiError) {
                    console.warn(
                        `Endpoint 'fetch' unexpectedly threw ${error.constructor.name}.` +
                            ` If this was intentional, please add ${error.constructor.name} to` +
                            " the endpoint's errors list in your Rapiddocs Definition.",
                    );
                    await error.send(res);
                } else {
                    res.status(500).json("Internal Server Error");
                }
                next(error);
            }
        });
        this.router.get("/data/list", async (req, res, next) => {
            try {
                await this.methods.list(
                    req as any,
                    {
                        send: async (responseBody) => {
                            res.json(
                                serializers.ListResponse.jsonOrThrow(responseBody, { unrecognizedObjectKeys: "strip" }),
                            );
                        },
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    },
                    next,
                );
                next();
            } catch (error) {
                if (error instanceof errors.SeedApiError) {
                    console.warn(
                        `Endpoint 'list' unexpectedly threw ${error.constructor.name}.` +
                            ` If this was intentional, please add ${error.constructor.name} to` +
                            " the endpoint's errors list in your Rapiddocs Definition.",
                    );
                    await error.send(res);
                } else {
                    res.status(500).json("Internal Server Error");
                }
                next(error);
            }
        });
        this.router.post("/data/query", async (req, res, next) => {
            const request = serializers.QueryRequest.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    await this.methods.query(
                        req as any,
                        {
                            send: async (responseBody) => {
                                res.json(
                                    serializers.QueryResponse.jsonOrThrow(responseBody, {
                                        unrecognizedObjectKeys: "strip",
                                    }),
                                );
                            },
                            cookie: res.cookie.bind(res),
                            locals: res.locals,
                        },
                        next,
                    );
                    next();
                } catch (error) {
                    if (error instanceof errors.SeedApiError) {
                        console.warn(
                            `Endpoint 'query' unexpectedly threw ${error.constructor.name}.` +
                                ` If this was intentional, please add ${error.constructor.name} to` +
                                " the endpoint's errors list in your Rapiddocs Definition.",
                        );
                        await error.send(res);
                    } else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            } else {
                res.status(422).json({
                    errors: request.errors.map(
                        (error) => ["request", ...error.path].join(" -> ") + ": " + error.message,
                    ),
                });
                next(request.errors);
            }
        });
        this.router.post("/data/update", async (req, res, next) => {
            const request = serializers.UpdateRequest.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    await this.methods.update(
                        req as any,
                        {
                            send: async (responseBody) => {
                                res.json(
                                    serializers.UpdateResponse.jsonOrThrow(responseBody, {
                                        unrecognizedObjectKeys: "strip",
                                    }),
                                );
                            },
                            cookie: res.cookie.bind(res),
                            locals: res.locals,
                        },
                        next,
                    );
                    next();
                } catch (error) {
                    if (error instanceof errors.SeedApiError) {
                        console.warn(
                            `Endpoint 'update' unexpectedly threw ${error.constructor.name}.` +
                                ` If this was intentional, please add ${error.constructor.name} to` +
                                " the endpoint's errors list in your Rapiddocs Definition.",
                        );
                        await error.send(res);
                    } else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            } else {
                res.status(422).json({
                    errors: request.errors.map(
                        (error) => ["request", ...error.path].join(" -> ") + ": " + error.message,
                    ),
                });
                next(request.errors);
            }
        });
        return this.router;
    }
}
