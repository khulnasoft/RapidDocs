# This file was auto-generated by Rapiddocs from our API Definition.

from seed import SeedApi
from seed import AsyncSeedApi
import typing
from seed import Column
from .utilities import validate_response


async def test_upload(client: SeedApi, async_client: AsyncSeedApi) -> None:
    expected_response: typing.Any = {"count": 1}
    expected_types: typing.Any = {"count": None}
    response = client.dataservice.upload(columns=[Column(id="id", values=[1.1])])
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.dataservice.upload(columns=[Column(id="id", values=[1.1])])
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: SeedApi, async_client: AsyncSeedApi) -> None:
    expected_response: typing.Any = {}
    expected_types: typing.Any = {}
    response = client.dataservice.delete()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.dataservice.delete()
    validate_response(async_response, expected_response, expected_types)


async def test_describe(client: SeedApi, async_client: AsyncSeedApi) -> None:
    expected_response: typing.Any = {
        "namespaces": {"key": {"count": 1}},
        "dimension": 1,
        "fullness": 1.1,
        "totalCount": 1,
    }
    expected_types: typing.Any = {
        "namespaces": ("dict", {0: (None, {"count": None})}),
        "dimension": None,
        "fullness": None,
        "totalCount": None,
    }
    response = client.dataservice.describe()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.dataservice.describe()
    validate_response(async_response, expected_response, expected_types)


async def test_fetch(client: SeedApi, async_client: AsyncSeedApi) -> None:
    expected_response: typing.Any = {
        "columns": {
            "key": {
                "id": "id",
                "values": [1.1],
                "metadata": {"key": 1.1},
                "indexedData": {"indices": [1], "values": [1.1]},
            }
        },
        "namespace": "namespace",
        "usage": {"units": 1},
    }
    expected_types: typing.Any = {
        "columns": (
            "dict",
            {
                0: (
                    None,
                    {
                        "id": None,
                        "values": ("list", {0: None}),
                        "metadata": ("dict", {0: (None, None)}),
                        "indexedData": {"indices": ("list", {0: None}), "values": ("list", {0: None})},
                    },
                )
            },
        ),
        "namespace": None,
        "usage": {"units": None},
    }
    response = client.dataservice.fetch()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.dataservice.fetch()
    validate_response(async_response, expected_response, expected_types)


async def test_list_(client: SeedApi, async_client: AsyncSeedApi) -> None:
    expected_response: typing.Any = {
        "columns": [{"id": "id"}],
        "pagination": {"next": "next"},
        "namespace": "namespace",
        "usage": {"units": 1},
    }
    expected_types: typing.Any = {
        "columns": ("list", {0: {"id": None}}),
        "pagination": {"next": None},
        "namespace": None,
        "usage": {"units": None},
    }
    response = client.dataservice.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.dataservice.list()
    validate_response(async_response, expected_response, expected_types)


async def test_query(client: SeedApi, async_client: AsyncSeedApi) -> None:
    expected_response: typing.Any = {
        "results": [{"matches": [{"id": "id"}], "namespace": "namespace"}],
        "matches": [
            {
                "id": "id",
                "score": 1.1,
                "values": [1.1],
                "metadata": {"key": 1.1},
                "indexedData": {"indices": [1], "values": [1.1]},
            }
        ],
        "namespace": "namespace",
        "usage": {"units": 1},
    }
    expected_types: typing.Any = {
        "results": ("list", {0: {"matches": ("list", {0: {"id": None}}), "namespace": None}}),
        "matches": (
            "list",
            {
                0: {
                    "id": None,
                    "score": None,
                    "values": ("list", {0: None}),
                    "metadata": ("dict", {0: (None, None)}),
                    "indexedData": {"indices": ("list", {0: None}), "values": ("list", {0: None})},
                }
            },
        ),
        "namespace": None,
        "usage": {"units": None},
    }
    response = client.dataservice.query(top_k=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.dataservice.query(top_k=1)
    validate_response(async_response, expected_response, expected_types)


async def test_update(client: SeedApi, async_client: AsyncSeedApi) -> None:
    expected_response: typing.Any = {}
    expected_types: typing.Any = {}
    response = client.dataservice.update(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.dataservice.update(id="id")
    validate_response(async_response, expected_response, expected_types)
