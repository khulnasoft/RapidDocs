/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */
package com.seed.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FetchResponse.Builder.class)
public final class FetchResponse {
    private final Optional<Map<String, Column>> columns;

    private final Optional<String> namespace;

    private final Optional<Usage> usage;

    private final Map<String, Object> additionalProperties;

    private FetchResponse(
            Optional<Map<String, Column>> columns,
            Optional<String> namespace,
            Optional<Usage> usage,
            Map<String, Object> additionalProperties) {
        this.columns = columns;
        this.namespace = namespace;
        this.usage = usage;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("columns")
    public Optional<Map<String, Column>> getColumns() {
        return columns;
    }

    @JsonProperty("namespace")
    public Optional<String> getNamespace() {
        return namespace;
    }

    @JsonProperty("usage")
    public Optional<Usage> getUsage() {
        return usage;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FetchResponse && equalTo((FetchResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FetchResponse other) {
        return columns.equals(other.columns) && namespace.equals(other.namespace) && usage.equals(other.usage);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.columns, this.namespace, this.usage);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Column>> columns = Optional.empty();

        private Optional<String> namespace = Optional.empty();

        private Optional<Usage> usage = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FetchResponse other) {
            columns(other.getColumns());
            namespace(other.getNamespace());
            usage(other.getUsage());
            return this;
        }

        @JsonSetter(value = "columns", nulls = Nulls.SKIP)
        public Builder columns(Optional<Map<String, Column>> columns) {
            this.columns = columns;
            return this;
        }

        public Builder columns(Map<String, Column> columns) {
            this.columns = Optional.ofNullable(columns);
            return this;
        }

        @JsonSetter(value = "namespace", nulls = Nulls.SKIP)
        public Builder namespace(Optional<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            this.namespace = Optional.ofNullable(namespace);
            return this;
        }

        @JsonSetter(value = "usage", nulls = Nulls.SKIP)
        public Builder usage(Optional<Usage> usage) {
            this.usage = usage;
            return this;
        }

        public Builder usage(Usage usage) {
            this.usage = Optional.ofNullable(usage);
            return this;
        }

        public FetchResponse build() {
            return new FetchResponse(columns, namespace, usage, additionalProperties);
        }
    }
}
