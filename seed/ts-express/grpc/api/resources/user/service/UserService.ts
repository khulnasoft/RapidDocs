/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as SeedApi from "../../../index";
import express from "express";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export interface UserServiceMethods {
    createUser(
        req: express.Request<never, SeedApi.CreateUserResponse, SeedApi.CreateUserRequest, never>,
        res: {
            send: (responseBody: SeedApi.CreateUserResponse) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction
    ): void | Promise<void>;
    getUser(
        req: express.Request<
            never,
            SeedApi.User,
            never,
            {
                username?: string;
                age?: number;
                weight?: number;
            }
        >,
        res: {
            send: (responseBody: SeedApi.User) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction
    ): void | Promise<void>;
}

export class UserService {
    private router;

    constructor(private readonly methods: UserServiceMethods, middleware: express.RequestHandler[] = []) {
        this.router = express.Router({ mergeParams: true }).use(
            express.json({
                strict: false,
            }),
            ...middleware
        );
    }

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.post("/users", async (req, res, next) => {
            const request = serializers.CreateUserRequest.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    await this.methods.createUser(
                        req as any,
                        {
                            send: async (responseBody) => {
                                res.json(
                                    serializers.CreateUserResponse.jsonOrThrow(responseBody, {
                                        unrecognizedObjectKeys: "strip",
                                    })
                                );
                            },
                            cookie: res.cookie.bind(res),
                            locals: res.locals,
                        },
                        next
                    );
                    next();
                } catch (error) {
                    if (error instanceof errors.SeedApiError) {
                        console.warn(
                            `Endpoint 'createUser' unexpectedly threw ${error.constructor.name}.` +
                                ` If this was intentional, please add ${error.constructor.name} to` +
                                " the endpoint's errors list in your Rapiddocs Definition."
                        );
                        await error.send(res);
                    } else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            } else {
                res.status(422).json({
                    errors: request.errors.map(
                        (error) => ["request", ...error.path].join(" -> ") + ": " + error.message
                    ),
                });
                next(request.errors);
            }
        });
        this.router.get("/users", async (req, res, next) => {
            try {
                await this.methods.getUser(
                    req as any,
                    {
                        send: async (responseBody) => {
                            res.json(serializers.User.jsonOrThrow(responseBody, { unrecognizedObjectKeys: "strip" }));
                        },
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    },
                    next
                );
                next();
            } catch (error) {
                if (error instanceof errors.SeedApiError) {
                    console.warn(
                        `Endpoint 'getUser' unexpectedly threw ${error.constructor.name}.` +
                            ` If this was intentional, please add ${error.constructor.name} to` +
                            " the endpoint's errors list in your Rapiddocs Definition."
                    );
                    await error.send(res);
                } else {
                    res.status(500).json("Internal Server Error");
                }
                next(error);
            }
        });
        return this.router;
    }
}
