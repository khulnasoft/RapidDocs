# This file was auto-generated by Rapiddocs from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
from ...commons.types.problem_id import ProblemId
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .create_problem_error import CreateProblemError


class CreateProblemResponse_Success(UniversalBaseModel):
    value: ProblemId
    type: typing.Literal["success"] = "success"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class CreateProblemResponse_Error(UniversalBaseModel):
    value: CreateProblemError
    type: typing.Literal["error"] = "error"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


CreateProblemResponse = typing.Union[CreateProblemResponse_Success, CreateProblemResponse_Error]
