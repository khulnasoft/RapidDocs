# This file was auto-generated by Rapiddocs from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .execution_session_state import ExecutionSessionState
import typing_extensions
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class GetExecutionSessionStateResponse(UniversalBaseModel):
    states: typing.Dict[str, ExecutionSessionState]
    num_warming_instances: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="numWarmingInstances")
    ] = None
    warming_session_ids: typing_extensions.Annotated[typing.List[str], FieldMetadata(alias="warmingSessionIds")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
