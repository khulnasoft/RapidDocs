# This file was auto-generated by Rapiddocs from our API Definition.

from __future__ import annotations
import typing
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import UniversalRootModel
from ....core.pydantic_utilities import UniversalBaseModel
from ....core.pydantic_utilities import update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def rapiddocs(self, value: typing.Literal["rapiddocs"]) -> UnionWithLiteral:
        if IS_PYDANTIC_V2:
            return UnionWithLiteral(
                root=_UnionWithLiteral.Rapiddocs(type="rapiddocs", value=value)
            )  # type: ignore
        else:
            return UnionWithLiteral(
                __root__=_UnionWithLiteral.Rapiddocs(type="rapiddocs", value=value)
            )  # type: ignore


class UnionWithLiteral(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing.Union[_UnionWithLiteral.Rapiddocs]

        def get_as_union(self) -> typing.Union[_UnionWithLiteral.Rapiddocs]:
            return self.root
    else:
        __root__: typing.Union[_UnionWithLiteral.Rapiddocs]

        def get_as_union(self) -> typing.Union[_UnionWithLiteral.Rapiddocs]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self, rapiddocs: typing.Callable[[typing.Literal["rapiddocs"]], T_Result]
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "rapiddocs":
            return rapiddocs(unioned_value.value)


class _UnionWithLiteral:
    class Rapiddocs(UniversalBaseModel):
        type: typing.Literal["rapiddocs"] = "rapiddocs"
        value: typing.Literal["rapiddocs"]


update_forward_refs(UnionWithLiteral)
