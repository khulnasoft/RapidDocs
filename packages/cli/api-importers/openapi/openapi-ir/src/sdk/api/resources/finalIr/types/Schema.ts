/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */

import * as RapiddocsOpenapiIr from "../../../index";

export type Schema =
    | RapiddocsOpenapiIr.Schema.Primitive
    | RapiddocsOpenapiIr.Schema.Object_
    | RapiddocsOpenapiIr.Schema.Array
    | RapiddocsOpenapiIr.Schema.Map
    | RapiddocsOpenapiIr.Schema.Optional
    | RapiddocsOpenapiIr.Schema.Enum
    | RapiddocsOpenapiIr.Schema.Reference
    | RapiddocsOpenapiIr.Schema.Literal
    | RapiddocsOpenapiIr.Schema.OneOf
    | RapiddocsOpenapiIr.Schema.Nullable
    | RapiddocsOpenapiIr.Schema.Unknown;

export namespace Schema {
    export interface Primitive extends RapiddocsOpenapiIr.PrimitiveSchema, _Utils {
        type: "primitive";
    }

    export interface Object_ extends RapiddocsOpenapiIr.ObjectSchema, _Utils {
        type: "object";
    }

    export interface Array extends RapiddocsOpenapiIr.ArraySchema, _Utils {
        type: "array";
    }

    export interface Map extends RapiddocsOpenapiIr.MapSchema, _Utils {
        type: "map";
    }

    export interface Optional extends RapiddocsOpenapiIr.OptionalSchema, _Utils {
        type: "optional";
    }

    export interface Enum extends RapiddocsOpenapiIr.EnumSchema, _Utils {
        type: "enum";
    }

    export interface Reference extends RapiddocsOpenapiIr.ReferencedSchema, _Utils {
        type: "reference";
    }

    export interface Literal extends RapiddocsOpenapiIr.LiteralSchema, _Utils {
        type: "literal";
    }

    export interface OneOf extends _Utils {
        type: "oneOf";
        value: RapiddocsOpenapiIr.OneOfSchema;
    }

    export interface Nullable extends RapiddocsOpenapiIr.NullableSchema, _Utils {
        type: "nullable";
    }

    export interface Unknown extends RapiddocsOpenapiIr.WithName, _Utils {
        type: "unknown";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        primitive: (value: RapiddocsOpenapiIr.PrimitiveSchema) => _Result;
        object: (value: RapiddocsOpenapiIr.ObjectSchema) => _Result;
        array: (value: RapiddocsOpenapiIr.ArraySchema) => _Result;
        map: (value: RapiddocsOpenapiIr.MapSchema) => _Result;
        optional: (value: RapiddocsOpenapiIr.OptionalSchema) => _Result;
        enum: (value: RapiddocsOpenapiIr.EnumSchema) => _Result;
        reference: (value: RapiddocsOpenapiIr.ReferencedSchema) => _Result;
        literal: (value: RapiddocsOpenapiIr.LiteralSchema) => _Result;
        oneOf: (value: RapiddocsOpenapiIr.OneOfSchema) => _Result;
        nullable: (value: RapiddocsOpenapiIr.NullableSchema) => _Result;
        unknown: (value: RapiddocsOpenapiIr.WithName) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const Schema = {
    primitive: (value: RapiddocsOpenapiIr.PrimitiveSchema): RapiddocsOpenapiIr.Schema.Primitive => {
        return {
            ...value,
            type: "primitive",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.Schema.Primitive,
                visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    object: (value: RapiddocsOpenapiIr.ObjectSchema): RapiddocsOpenapiIr.Schema.Object_ => {
        return {
            ...value,
            type: "object",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.Schema.Object_,
                visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    array: (value: RapiddocsOpenapiIr.ArraySchema): RapiddocsOpenapiIr.Schema.Array => {
        return {
            ...value,
            type: "array",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.Schema.Array,
                visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    map: (value: RapiddocsOpenapiIr.MapSchema): RapiddocsOpenapiIr.Schema.Map => {
        return {
            ...value,
            type: "map",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.Schema.Map,
                visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    optional: (value: RapiddocsOpenapiIr.OptionalSchema): RapiddocsOpenapiIr.Schema.Optional => {
        return {
            ...value,
            type: "optional",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.Schema.Optional,
                visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    enum: (value: RapiddocsOpenapiIr.EnumSchema): RapiddocsOpenapiIr.Schema.Enum => {
        return {
            ...value,
            type: "enum",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.Schema.Enum,
                visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    reference: (value: RapiddocsOpenapiIr.ReferencedSchema): RapiddocsOpenapiIr.Schema.Reference => {
        return {
            ...value,
            type: "reference",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.Schema.Reference,
                visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    literal: (value: RapiddocsOpenapiIr.LiteralSchema): RapiddocsOpenapiIr.Schema.Literal => {
        return {
            ...value,
            type: "literal",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.Schema.Literal,
                visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    oneOf: (value: RapiddocsOpenapiIr.OneOfSchema): RapiddocsOpenapiIr.Schema.OneOf => {
        return {
            value: value,
            type: "oneOf",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.Schema.OneOf,
                visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    nullable: (value: RapiddocsOpenapiIr.NullableSchema): RapiddocsOpenapiIr.Schema.Nullable => {
        return {
            ...value,
            type: "nullable",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.Schema.Nullable,
                visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    unknown: (value: RapiddocsOpenapiIr.WithName): RapiddocsOpenapiIr.Schema.Unknown => {
        return {
            ...value,
            type: "unknown",
            _visit: function <_Result>(
                this: RapiddocsOpenapiIr.Schema.Unknown,
                visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>,
            ) {
                return RapiddocsOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: RapiddocsOpenapiIr.Schema, visitor: RapiddocsOpenapiIr.Schema._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "primitive":
                return visitor.primitive(value);
            case "object":
                return visitor.object(value);
            case "array":
                return visitor.array(value);
            case "map":
                return visitor.map(value);
            case "optional":
                return visitor.optional(value);
            case "enum":
                return visitor.enum(value);
            case "reference":
                return visitor.reference(value);
            case "literal":
                return visitor.literal(value);
            case "oneOf":
                return visitor.oneOf(value.value);
            case "nullable":
                return visitor.nullable(value);
            case "unknown":
                return visitor.unknown(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
