/**
 * This file was auto-generated by Rapiddocs from our API Definition.
 */
package com.seed.api.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DescribeResponse.Builder.class)
public final class DescribeResponse {
    private final Optional<Map<String, NamespaceSummary>> namespaces;

    private final Optional<Integer> dimension;

    private final Optional<Double> fullness;

    private final Optional<Integer> totalCount;

    private DescribeResponse(
            Optional<Map<String, NamespaceSummary>> namespaces,
            Optional<Integer> dimension,
            Optional<Double> fullness,
            Optional<Integer> totalCount) {
        this.namespaces = namespaces;
        this.dimension = dimension;
        this.fullness = fullness;
        this.totalCount = totalCount;
    }

    @JsonProperty("namespaces")
    public Optional<Map<String, NamespaceSummary>> getNamespaces() {
        return namespaces;
    }

    @JsonProperty("dimension")
    public Optional<Integer> getDimension() {
        return dimension;
    }

    @JsonProperty("fullness")
    public Optional<Double> getFullness() {
        return fullness;
    }

    @JsonProperty("totalCount")
    public Optional<Integer> getTotalCount() {
        return totalCount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DescribeResponse && equalTo((DescribeResponse) other);
    }

    private boolean equalTo(DescribeResponse other) {
        return namespaces.equals(other.namespaces)
                && dimension.equals(other.dimension)
                && fullness.equals(other.fullness)
                && totalCount.equals(other.totalCount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.namespaces, this.dimension, this.fullness, this.totalCount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, NamespaceSummary>> namespaces = Optional.empty();

        private Optional<Integer> dimension = Optional.empty();

        private Optional<Double> fullness = Optional.empty();

        private Optional<Integer> totalCount = Optional.empty();

        private Builder() {}

        public Builder from(DescribeResponse other) {
            namespaces(other.getNamespaces());
            dimension(other.getDimension());
            fullness(other.getFullness());
            totalCount(other.getTotalCount());
            return this;
        }

        @JsonSetter(value = "namespaces", nulls = Nulls.SKIP)
        public Builder namespaces(Optional<Map<String, NamespaceSummary>> namespaces) {
            this.namespaces = namespaces;
            return this;
        }

        public Builder namespaces(Map<String, NamespaceSummary> namespaces) {
            this.namespaces = Optional.ofNullable(namespaces);
            return this;
        }

        @JsonSetter(value = "dimension", nulls = Nulls.SKIP)
        public Builder dimension(Optional<Integer> dimension) {
            this.dimension = dimension;
            return this;
        }

        public Builder dimension(Integer dimension) {
            this.dimension = Optional.ofNullable(dimension);
            return this;
        }

        @JsonSetter(value = "fullness", nulls = Nulls.SKIP)
        public Builder fullness(Optional<Double> fullness) {
            this.fullness = fullness;
            return this;
        }

        public Builder fullness(Double fullness) {
            this.fullness = Optional.ofNullable(fullness);
            return this;
        }

        @JsonSetter(value = "totalCount", nulls = Nulls.SKIP)
        public Builder totalCount(Optional<Integer> totalCount) {
            this.totalCount = totalCount;
            return this;
        }

        public Builder totalCount(Integer totalCount) {
            this.totalCount = Optional.ofNullable(totalCount);
            return this;
        }

        public DescribeResponse build() {
            return new DescribeResponse(namespaces, dimension, fullness, totalCount);
        }
    }
}
